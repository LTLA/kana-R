// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// validate_
SEXP validate_(std::string path, bool embedded, int version);
RcppExport SEXP _kana_parser_validate_(SEXP pathSEXP, SEXP embeddedSEXP, SEXP versionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< bool >::type embedded(embeddedSEXP);
    Rcpp::traits::input_parameter< int >::type version(versionSEXP);
    rcpp_result_gen = Rcpp::wrap(validate_(path, embedded, version));
    return rcpp_result_gen;
END_RCPP
}
// write_integer_scalar
SEXP write_integer_scalar(std::string path, std::string host, std::string name, int val);
RcppExport SEXP _kana_parser_write_integer_scalar(SEXP pathSEXP, SEXP hostSEXP, SEXP nameSEXP, SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type host(hostSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< int >::type val(valSEXP);
    rcpp_result_gen = Rcpp::wrap(write_integer_scalar(path, host, name, val));
    return rcpp_result_gen;
END_RCPP
}
// write_double_scalar
SEXP write_double_scalar(std::string path, std::string host, std::string name, double val);
RcppExport SEXP _kana_parser_write_double_scalar(SEXP pathSEXP, SEXP hostSEXP, SEXP nameSEXP, SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type host(hostSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< double >::type val(valSEXP);
    rcpp_result_gen = Rcpp::wrap(write_double_scalar(path, host, name, val));
    return rcpp_result_gen;
END_RCPP
}
// write_string_scalar
SEXP write_string_scalar(std::string path, std::string host, std::string name, std::string val);
RcppExport SEXP _kana_parser_write_string_scalar(SEXP pathSEXP, SEXP hostSEXP, SEXP nameSEXP, SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type host(hostSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type val(valSEXP);
    rcpp_result_gen = Rcpp::wrap(write_string_scalar(path, host, name, val));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_kana_parser_validate_", (DL_FUNC) &_kana_parser_validate_, 3},
    {"_kana_parser_write_integer_scalar", (DL_FUNC) &_kana_parser_write_integer_scalar, 4},
    {"_kana_parser_write_double_scalar", (DL_FUNC) &_kana_parser_write_double_scalar, 4},
    {"_kana_parser_write_string_scalar", (DL_FUNC) &_kana_parser_write_string_scalar, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_kana_parser(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
